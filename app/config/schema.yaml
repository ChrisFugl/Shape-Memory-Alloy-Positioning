batch_size: int(min=1, required=False)
checkpoint_dir: str(required=False)
collect_actions: bool(required=False)
collect_actions_every: int(min=1, required=False)
exploration_steps: int(required=False)
evaluation_steps: int(required=False)
gradient_steps: int(required=False)
iterations: int(required=False)
max_buffer_size: int(min=1, required=False)
max_trajectory_length: int(min=1, required=False)
min_num_steps_before_training: int(min=0, required=False)
save_model: str(required=False)
save_checkpoint_interval_s: int(min=1, required=False)
model: include('model')
environment: any(
  include('environment_debug'),
  include('environment_real_time'),
  include('environment_simulated'),
  include('environment_test'),
  )
policy: any(
  include('policy_categorical'),
  include('policy_gaussian'),
  include('policy_range'),
  include('policy_tanh_gaussian'),
  include('policy_test'),
  )
---
environment_debug:
  type: enum('debug')
  goal_position: num(required=False)
  goal_tolerance: num(min=0, required=False)
  min_start_position: num(required=False)
  max_start_position: num(required=False)
  pass_scale_interval_to_policy: bool(required=False)
  scale_action: bool(required=False)
---
environment_real_time:
  type: enum('real_time')
  action_decimal_precision: int(min=1, required=True)
  action_digit_precision: int(min=1, required=True)
  bytes_per_value: int(min=1, required=True)
  host: str(required=True)
  next_state_wait_time: num(min=0, required=False)
  port_read: int(min=1, required=True)
  port_write: int(min=1, required=True)
  values_per_observation: int(int=1, required=True)
  goal_type: enum('static', 'dynamic', required=True)
  goal_tolerance: num(min=0, required=True)
  goal_time_tolerance_s: num(min=0, required=True)
  goal_min: num(min=0, required=True)
  goal_max: num(max=0, required=True)
  goal_position: num(min=0, required=True)
  pass_scale_interval_to_policy: bool(required=False)
  scale_action: bool(required=False)
  max_position: num(min=0, required=True)
  max_linear_threshold_position: num(min=0, required=True)
  max_linear_threshold_voltage: num(min=0, required=True)
  max_temperature: num(min=0, required=True)
  max_voltage: num(min=0, required=True)
  reset_tolerance: num(min=0, required=True)
  reward_std: num(min=0, required=True)
  reward_trunc_min: num(min=0, required=True)
  reward_trunc_max: num(min=0, required=True)
---
environment_simulated:
  type: enum('simulated')
  final_position: num(min=0, required=True)
  goal_tolerance: num(min=0, required=False)
  initial_deflection: num(required=False)
  initial_force: num(required=False)
  initial_martensitic_fraction_of_detwinned_martensite: num(required=False)
  initial_position: num(required=False)
  initial_temperature: num(required=False)
  number_of_coils: num(required=False)
  spring_diameter: num(required=False)
  wire_diameter: num(required=False)
  twinned_martensite_shear_modulus: num(required=False)
  austenite_shear_modulus: num(required=False)
  austenitic_start_temperature: num(required=False)
  austenitic_finish_temperature: num(required=False)
  austenitic_constant: num(required=False)
  martensitic_start_temperature: num(required=False)
  martensitic_finish_temperature: num(required=False)
  martensitic_constant: num(required=False)
  max_recoverable_deflection: num(required=False)
  critical_detwinning_starting_stress: num(required=False)
  critical_detwinning_finishing_stress: num(required=False)
  delta_max: num(required=False)
  shear_stress: num(required=False)
  force_applied: num(required=False)
  sigma_o: num(required=False)
---
environment_test:
  type: enum('test')
  initial_state: num(required=True)
  final_state: num(required=True)
---
model:
  discount_factor: num(required=False)
  exponential_weight: num(required=False)
  learning_rate_policy: num(required=False)
  learning_rate_q: num(required=False)
  network: include('network')
  reward_scale: num(min=0, required=False)
  target_update_period: int(min=1, required=False)
  use_automatic_entropy_tuning: bool(required=False)
---
network:
  hidden_size: int(min=1, required=False)
  number_of_hidden_layers: int(min=1, required=False)
---
policy_categorical:
  type: enum('categorical')
  actions: list(num(), min=1)
  network: include('network')
---
policy_gaussian:
  type: enum('gaussian')
  network: include('network')
---
policy_range:
  type: enum('range')
  max: num(required=True)
  min: num(required=True)
  network: include('network')
policy_tanh_gaussian:
  type: enum('tanh_gaussian')
  network: include('network')
---
policy_test:
  type: enum('test')
  change: int(required=True)
